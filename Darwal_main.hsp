;Darwal OS

*dll
#uselib "user32.dll"
	#func SetParentA "SetParent" int,int					;親子ウィンドウの作成に使う
	#cfunc WindowFromPointA "WindowFromPoint" int, int		;ウィンドウを動かすときに使う
	#func GetFocusA "GetFocus"								;フォーカスのあるウィンドウのハンドルを取得
	
#uselib "HSPThread.dll"
	#func HSPCreateThread "HSPCreateThread" int,str,int,int,int,int,int

#module

;関数の登録

#defcfunc click_range int mx, int my, int mx2, int my2						;指定された範囲内にマウスがあるか確認する関数
	if mx <= mousex and mx2 >= mousex and my <= mousey and my2 >= mousey {
		return 1
	}else{
		return 0
	}

;新規命令の登録

#deffunc cmes str ctext, int cx, int cy, int cx2, int cy2	;文字を中央に表示
	#include "user32.as"
	if cx2=0 : cx2=scx		;cx2が省略されている場合、画面右端の座標をcx2に代入
	if cy2=0 : cy2=scy		;cy2が省略されている場合、画面下端の座標をcy2に代入
	RECT = cx, cy, cx2, cy2
	DrawText hdc, ctext, -1, varptr(RECT), $01
	redraw 1
	return
	
#deffunc gblur int p1, int p2	;画像をぼかす（hsp/sample/new/gblur.hsp）
	gmode 3, ginfo_sx, ginfo_sy, 128
	if (p2&1)=0 {
		repeat p1
		pos 1,0:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),2,0
		loop
	}
	if (p2&2)=0 {
		repeat p1
		pos 0,1:gcopy ginfo(3)
		pos 0,0:gcopy ginfo(3),0,2
		loop
	}
	return
	
#deffunc boxfa int ax, int ay, int bx, int by								;半透明色表示命令
	pdx = ax, bx, bx, ax
	pdy = ay, ay, by, by
	gsquare -1,pdx, pdy
	return
	
#deffunc windowmake int wID, int windowx, int windowy, int window_mode		;ウィンドウの表示
	bgscr wID,windowx,windowy
	
	phwnd@.wID = hwnd
	windows@=windows@+1		;子ウィンドウの総数
	windowx@=windowx
	windowy@=windowy
	
	SetParent phwnd@.wID,phwnd@.0
	
	new_wID@++						;次回ウィンドウを作るときのウィンドウID
	windowmode@.wID@ = window_mode	;ウィンドウモード
	
	gsel wID@
	return
	
#defcfunc get_chapter var underlying_var, str search_chapter, str punctuate, str end_word	;各項目の読み込み（使用例：get_chapter(元の変数, "検索する項目", "始点区切りコード", "終端コード") ）
	value = instr(underlying_var, 0, search_chapter)
	get_chapter_buf = strmid ( underlying_var, value + strlen(""+search_chapter+""+punctuate+""), instr(underlying_var, value + strlen(""+search_chapter+""+punctuate+""), end_word) )
	
	return get_chapter_buf
	
#global

*variables
	/*変数の登録*/
	wID = 1000
	new_wID = wID + 1
	first_wID = new_wID
	window_data = ""
	
	new_eID = -1
	
	windowx = 1024 : windowy = 576
	
	systemfont = "Meiryo"
	
	directory = dirinfo(0)
	
	sdim filelist, 1024, 1000, 0
	sdim filelist_with_path, 1024, 1000, 0
	sdim filelist_category, 1024, 1000, 0
	
*buffering
	chdir "System/Computer/C§Drive/darwal/img/"
	
	celload "darwal_logo.png", 1
	
	celload "icons/folder.png", 2
	
	//エクスプローラー向け
		celload "icons/explorer/_.png", 3	; 最小化ボタン
		celload "icons/explorer/x.png", 4	; 閉じるボタン
	
		celload "icons/explorer/folder.png", 5	; フォルダアイコン
		celload "icons/explorer/drive.png", 6	; ドライブアイコン
		celload "icons/explorer/file.png", 7	; ファイルアイコン
		celload "icons/explorer/ax.png", 8		; axファイルアイコン
		celload "icons/explorer/exe.png", 9		; exeファイルアイコン
		celload "icons/explorer/text.png", 10	; テキストファイルアイコン
	
	chdir directory
	
*register_wID_of_parent_window
	/*親ウィンドウのウィンドウID（wID）登録*/
	screen 0, 1024, 576
	
	phwnd.0 = hwnd
	
*startup
	repeat 255
		redraw 0
	
		color cnt, cnt, cnt : boxf
		
		redraw 1
		await 10
	loop
	
	repeat 128
		redraw 0
	
		color 255, 255, 255 : boxf
		
		gmode 3,,,cnt*2
		pos windowx/2-113, windowy/2-27 : gcopy 1, 0, 0, 226, 54
		
		redraw 1
		await 10
	loop
	
	pos windowx/2-113, windowy/2-27 : gcopy 1, 0, 0, 226, 54

*Desktop
	onclick gosub *on_click
	
	objimage 2 : objsize 64, 64
	pos 30, 10 : button"", *File_Explorer
	
	color 0, 0, 0 : font systemfont, 12
	cmes "Explorer", 10, 10+64, 10+100, 10+64+20
	
	stop
	
*File_Explorer
	now = "File_Explorer"
	wID = new_wID
	
	new_eID += 1
	eID = new_eID
	
	notesel File_Explorer__Dir_buf
	noteadd ""+directory+"\\System\\Computer\\", eID, 1
	
	WindowSize_X = 800
	WindowSize_Y = 500
	
	windowmake wID, WindowSize_X, WindowSize_Y, 1
	
	eID_hwnd(eID) = hwnd
	eID_wID(eID) = wID
	
	onclick gosub *on_click
	
	//最小化ボタン
		objimage 3, 0, 0, 32, 32 : objsize 32, 32
		pos WindowSize_X-64, 0 : button gosub "", *window_minimization
		
	//閉じるボタン
		objimage 4, 0, 0, 32, 32 : objsize 32, 32
		pos WindowSize_X-32, 0 : button gosub "", *window_close
		close_button_hwnd(wID-first_wID) = objinfo(stat, 2)
	
*File_Explorer__draw
	//どのエクスプローラーがアクティブか確認
		GetFocusA : Focus_hand = stat
	
		eID = -1
		
		repeat new_eID+1
			if eID_hwnd(cnt) = Focus_hand {
				eID = cnt
				break
			}
		loop
	
		gsel eID_wID(eID)
		
	//背景色
		color 250, 250, 250 : boxf
	
	//エクスプローラー上部のタブ
		File_Explorer__border_Tabmenu_y = 50
		color 0, 162, 232 : boxf 0, 0, WindowSize_X-1, File_Explorer__border_Tabmenu_y
	
	//エクスプローラー2段めのメニュー
		File_Explorer__border_2nd_menu_y = 80
		color 240, 240, 240 : boxf 0, File_Explorer__border_Tabmenu_y, WindowSize_X, File_Explorer__border_2nd_menu_y
	
	//エクスプローラー左側のメニュー
		File_Explorer__border_Sidemenu_x = 200
		color 50, 50, 50 : boxf 0, File_Explorer__border_2nd_menu_y, File_Explorer__border_Sidemenu_x, WindowSize_Y
	
	//エクスプローラー部分
		gosub *File_Explorer__get_files
	
		color 0, 0, 0
		font systemfont, 14
	
		repeat get_files__total_files(eID)
			//アイコン
				pos File_Explorer__border_Sidemenu_x+20, File_Explorer__border_2nd_menu_y+20+(cnt*32)   : gmode 2
				if filelist_category(eID,cnt) = "Drive" {
					gcopy 6, 0, 0, 30, 30
				} else : if filelist_category(eID,cnt) = "Directory" {
					gcopy 5, 0, 0, 30, 30
				} else : if filelist_category(eID,cnt) = "File" {
					gcopy 7, 0, 0, 30, 30
				} else : if filelist_category(eID,cnt) = "File__ax" {
					gcopy 8, 0, 0, 30, 30
				} else : if filelist_category(eID,cnt) = "File__exe" {
					gcopy 9, 0, 0, 30, 30
				} else : if filelist_category(eID,cnt) = "File__text" {
					gcopy 10, 0, 0, 30, 30
				}
				
			//ファイル名・ディレクトリ名
				pos File_Explorer__border_Sidemenu_x+60, File_Explorer__border_2nd_menu_y+20+(cnt*32)+5 : mes ""+filelist(eID,cnt)+""
		loop
	
	notesel window_data
	noteadd "1", (wID-first_wID), 1
	
	stop
	
*File_Explorer__get_files
	notesel File_Explorer__Dir_buf
	noteget File_Explorer__Dir, eID
	
	chdir File_Explorer__Dir
	
	filelist_buf = ""
	
	//パス名を覗いたファイルとディレクトリの一覧を取得
		dirlist filelist_buf, "*.*", 0
		get_files__total_files(eID) = stat
		
		repeat get_files__total_files(eID)
			//ファイル名・ディレクトリ名
				notesel filelist_buf
				noteget filelist(eID,cnt), cnt
	
			//ファイル・ディレクトリのパス
				filelist_with_path(eID,cnt) = ""+File_Explorer__Dir+"\\"+filelist(eID,cnt)+""
	
			//ファイル・ディレクトリの種類
				filelist_category(eID,cnt) = "Directory"
				
				//ディレクトリ名に特殊文字"%"があった場合
				if instr(filelist(eID,cnt), 0, "§") != -1 {
					if instr(filelist(eID,cnt), 0, "§Drive") != -1 {
						filelist(eID,cnt) = strmid(filelist(eID,cnt), 0, instr(filelist(eID,cnt), 0, "§Drive"))
						filelist(eID,cnt) += "ドライブ（"+filelist(eID,cnt)+":\\）"
						filelist_category(eID,cnt) = "Drive"
					}
				}
	
				//ファイル名に拡張子"."があった場合
				if instr(filelist(eID,cnt), 0, ".") != -1 {
					filelist_category(eID,cnt) = "File"
	
					//拡張子からファイルの種類を判定
					if instr(filelist(eID,cnt), 0, ".ax") != -1 {
						filelist_category(eID,cnt) = "File__ax"
					}
					if instr(filelist(eID,cnt), 0, ".exe") != -1 {
						filelist_category(eID,cnt) = "File__exe"
					}
					if instr(filelist(eID,cnt), 0, ".txt") != -1 {
						filelist_category(eID,cnt) = "File__text"
					}
				}
				
		loop
	
	//カレントディレクトリを元に戻す
		chdir directory
	
	return
	
*window_minimization
	/*ウィンドウの最小化*/
	
		dialog"まだ出来ません.."
	
		stop
	
*window_close
	/*ウィンドウを消す（最小化ではない）*/
	
	extant_window = 0
	
	repeat new_wID - first_wID
		;現存する（＝まだ消されていない）ウィンドウがいくつあるか調べる
			notesel window_data
			noteget window_data_buf, cnt
			
			if window_data_buf = "1" {
				extant_window ++
			}
	
		;現在アクティブな子ウィンドウを検出（どのウィンドウを消すか）
			GetFocusA : Focus_hand = stat
		
			gsel 0
			title "Focus_hand="+Focus_hand+" close_button_hwnd(cnt)="+close_button_hwnd(cnt)+""
	
			;ウィンドウを消すボタンと一致していればそのボタンが設置されているウィンドウを消す
			if Focus_hand == close_button_hwnd(cnt) {
				clear_wID = cnt+first_wID
				gsel clear_wID, -1
			
				notesel window_data
				noteadd "0", (clear_wID-first_wID), 1
					
				break
			}
	
	loop
	
	gsel 0
	return

*on_click
	/*親ウィンドウ・子ウィンドウ問わずクリックされたときの動作*/
	
	//まず子ウィンドウを動かす以外の目的でクリックされていないか確認
		gosub *clicked_on_other_than_windows
	
	//子ウィンドウを動かす
		old=now
	
		;現在アクティブな子ウィンドウを検出（どのウィンドウを消すか）
			GetFocusA : Focus_hand = stat
		
			gsel 0
			title "Focus_hand="+Focus_hand+""
		
		;現在アクティブな子ウィンドウを検出
			repeat new_wID - 1
				if WindowFromPointA( ginfo(0), ginfo(1) ) == phwnd(cnt+1) : wID = cnt+1 : break
			loop
			
			if wID = 0 or windowmode.wID = 2 {
				return
			}
		
	gsel wID
	sendmsg phwnd.wID,$00A1,2,0 
	
	return
	
*clicked_on_other_than_windows
	/*子ウィンドウを動かす以外の目的でクリックされたときの動作*/
	
	//エクスプローラー
		if now="File_Explorer" {
			//どのエクスプローラーがアクティブか確認
				GetFocusA : Focus_hand = stat
			
				eID = -1
				
				repeat new_eID+1
					if eID_hwnd(cnt) = Focus_hand {
						eID = cnt
						break
					}
				loop
	
				if eID = -1 {
					return
				}
	
			//フォルダ・ファイルを開く
				if click_range(File_Explorer__border_Sidemenu_x, File_Explorer__border_2nd_menu_y, WindowSize_X, WindowSize_Y) = 1 {
					clicked_file_number = ( ginfo_my-ginfo_wy1-(File_Explorer__border_2nd_menu_y+20) )/32
	
					if clicked_file_number > get_files__total_files(eID)-1 {
						return
					}
	
					if filelist_category(eID,clicked_file_number) != "Directory" and filelist_category(eID,clicked_file_number) != "Drive" {
						
						if filelist_category(eID,clicked_file_number) = "File__ax" {
							ax_file = ""+File_Explorer__Dir+"\\"+filelist(eID,clicked_file_number)+""
							goto *run_ax
						} else : if filelist_category(eID,clicked_file_number) = "File__exe" {
							exe_file = ""+File_Explorer__Dir+"\\"+filelist(eID,clicked_file_number)+""
							goto *run_exe
						} else : if filelist_category(eID,clicked_file_number) = "File__text" {
							text_file = ""+File_Explorer__Dir+"\\"+filelist(eID,clicked_file_number)+""
							goto *open_text
						} else {
							return
						}
						
					}
					
					notesel File_Explorer__Dir_buf
					noteadd ""+filelist_with_path(eID, clicked_file_number)+"\\", eID, 1
					
					goto *File_Explorer__draw
				}
	
		}
	
	return
	
*run_ax
	/*ax形式のファイルの実行*/
	now = "run_ax"
	
	//実行ファイルの情報を取得
		//初期値
			about_ax__Title = filelist(eID,clicked_file_number)
			about_ax__Size_X = 640
			about_ax__Size_Y = 480
	
		//ファイルの情報ファイル（.aax形式）があれば読み込み
			exist ""+File_Explorer__Dir+"\\about.aax"
		
			if strsize != -1 {
				notesel about_ax
				noteload ""+File_Explorer__Dir+"\\about.aax"
		
				repeat 3
					noteget about_ax_buf, cnt
		
					if instr(about_ax_buf, 0, "Title") != -1 {
						about_ax__Title = get_chapter(about_ax_buf, "Title", " = \"", "\";")
					}
					if instr(about_ax_buf, 0, "Size_X") != -1 {
						about_ax__Size_X = int( get_chapter(about_ax_buf, "Size_X", " = ", ";") )
					}
					if instr(about_ax_buf, 0, "Size_Y") != -1 {
						about_ax__Size_Y = int( get_chapter(about_ax_buf, "Size_Y", " = ", ";") )
					}
				loop
			}
	
	//ウィンドウ作成
		wID = new_wID
	
		WindowSize_X = about_ax__Size_X +2
		WindowSize_Y = about_ax__Size_Y +32+1
		
		windowmake wID, WindowSize_X, WindowSize_Y, 1
		
		onclick gosub *on_click
	
	//最小化ボタン
		objimage 3, 0, 0, 32, 32 : objsize 32, 32
		pos WindowSize_X-64, 0 : button gosub "", *window_minimization
		
	//閉じるボタン
		objimage 4, 0, 0, 32, 32 : objsize 32, 32
		pos WindowSize_X-32, 0 : button gosub "", *window_close
		close_button_hwnd(wID-first_wID) = objinfo(stat, 2)
	
	//タイトルバー及び枠
		color 0, 162, 232 : boxf
	
		color 255, 255, 255
		cmes about_ax__Title, 0, 10, about_ax__Size_X+2, 32
	
	//ディレクトリ変更
		chdir File_Explorer__Dir
		
	//実行
		HSPCreateThread hwnd, ax_file, 1, 32, about_ax__Size_X, about_ax__Size_Y, 0x100
	
	stop
	
*run_exe
	/*exe形式のファイルの実行（exec）*/
	now = "run_exe"
	onclick gosub *on_click
	
	exec exe_file
	
	stop
	
*open_text
	/*テキストファイルを開く（exec）*/
	now = "open_text"
	onclick gosub *on_click
	
	exec text_file, 16
	
	stop